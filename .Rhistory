plot(x,y)
lm((I(y) ~ I(x))-1)
lm((I(y) ~ I(x)))
lm((I(y-mean(y)) ~ I(x-mean(x)))-1)
lm((I(y-mean(y)) ~ I(x-mean(x))))
lm((I(y-mean(y)) ~ I(x-mean(x))) - 1, )
lm((I(y-mean(y)) ~ I(x-mean(x))))
lm((I(y) ~ I(x)))
lm(formula = I(y-mean(y)) ~ I(x-mean(x)) - l, )
lm(formula = I(y-mean(y)) ~ I(x-mean(x)) - 1, )
lm(formula = I(y) ~ I(x) - 1, )
data(mtcars)
head(mtcars)
lm(mt ~ mpg, data=mtcars)
lm(wt ~ mpg, data=mtcars)
lm(mpg ~ wt, data=mtcars)
coef(lm(mpg ~ wt - 1 , data=mtcars))
coef(lm(mpg ~ wt, data=mtcars))
coef(lm(mpg ~ wt, data=mtcars))
mean(mtcars$wt)
mean(mtcars$mpg)
coef(lm(I(mpg - 20.09) ~ I(wt - 3.21) -1 , data=mtcars))
lm(I(mpg - 20.09) ~ I(wt - 3.21) -1 , data=mtcars)
beta1=0.5(1/0.5)
beta1=0.5*(1/0.5)
beta1
0.4/1.5
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x1 <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x1)
(8.58-9.31)
sd(x1)
-0.73/0.75
x2 <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y2 <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
beta1 <- cor(x2,y2)*sd(y2)/sd(x2)
beta0 <- mean(y2) - beta1*mean(x2)
beta0
x3 <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
sum((x3-mean(x3))^2)
mean(x3)
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
w <- c(2, 1, 3, 1)
mean(w)
0.0025/1.75
0.0025*1.75
sum(w * x) / sum(w)
sum(x)
install.packages("swirl")
library("sqldf", lib.loc="~/R/win-library/3.1")
library("UsingR", lib.loc="~/R/win-library/3.1")
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline,lwd=3, col="red")
summary(regrline)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- (lm(y ~ x))
summary(fit)
summary(fit)$sigma
head(mtcars)
x1 <- mtcars$wt
y1 <- mtcars$mpg
fit1 <- lm(y1 ~ x1)
summary(fit1)
summary(fit1)$coefficients
sumcoef <- summary(fit1)$coefficients
sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]
sumcoef[2,1] + c(-1, 1) * qt(.975, df = fit1$df) * sumcoef[2, 2]
plot(fit1)
plot(y1,x1)
plot(x1,y1)
sumcoef[2,1]
confint(fit1, y1, leve=0.95)
confint(fit1, 'y1', level=0.95)
confint(fit1, y1, level=0.95)
?mtcars
predict(fit1, new=x1, interval="prediction")
predict(fit1, new=3, interval="prediction")
predict(fit1, newdata=c(3), se.fit = TRUE, interval="prediction",level=0.95)
predict(fit1, newdata=data.frame(x = seq(3)), interval="prediction",level=0.95)
fit1
predict(fit1, newdata=data.frame(x1 = 3), interval="prediction",level=0.95)
predict(fit1, newdata=data.frame(x1 = 2), interval="confidence",level=0.95)
predict(fit1, newdata=data.frame(x1 = 1), interval="confidence",level=0.95)
predict(fit1, newdata=data.frame(x1 = mean(mtcars$wt)), interval="confidence",level=0.95)
fit2 <- lm(y1 ~ 1)
residuals(fit1)
residulas(fit2)
residuals(fit2)
summary(fit2)
0.12/0.89
residuals(fit2)/residuals(fit1)
resid(fit1)
sum(resid(fit1)^2)/sum(resid(fit2^2))
sum(resid(fit1)^2)/sum(resid(fit2)^2)
summary(fit1)
sumcoef[2,1] + c(-1, 1) * qt(.975, df = fit1$df) * sumcoef[2, 2]
(sumcoef[2,1] + c(-1, 1) * qt(.975, df = fit1$df) * sumcoef[2, 2])*2
View(mtcars)
help(mtcars)
summary(lm(mpg ~ cyl + wt, data=mtcars))
summary(lm(mpg ~ cyl + wt, data=mtcars))$coef
library("UsingR", lib.loc="~/R/win-library/3.1")
datasets(InsectSprays)
help(UsingR)
data
datasets
dataset
library(datasets)
datasets
data
ls(data)
head(data)
?data
data(UsingR)
library(help="datasets")
data(InsectSprays)
head(InsectSprays)
summary(lm(mpg ~ cyl + wt, data=mtcars))
lm(mpg ~ I(wt) + factor(cyl), data = mtcars)
summmary(lm(mpg ~ I(wt) + factor(cyl), data = mtcars))
summary(lm(mpg ~ I(wt) + factor(cyl), data = mtcars))
summary(lm(mpg ~ I(wt) + factor(cyl), data = mtcars))
summary(lm(mpg ~ factor(cyl) + wt, data = mtcars))
summary(lm(mpg ~ factor(cyl) + I(wt), data = mtcars))
summary(lm(mpg ~ factor(cyl)-1, data = mtcars))
summary(lm(mpg ~ factor(cyl), data = mtcars))
summary(lm(mpg ~ factor(cyl) + I(wt), data = mtcars))
summary(lm(mpg ~ factor(cyl), data = mtcars))
summary(lm(mpg ~ factor(cyl) + I(wt), data = mtcars))
summary(lm(mpg ~ factor(cyl) * I(wt), data = mtcars))
fit2 <- lm(mpg ~ factor(cyl) * I(wt), data = mtcars)
fit1 <- lm(mpg ~ factor(cyl) + I(wt), data = mtcars)
anova(fit1, fit2)
?influence.measures
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
newfit <- lm (y ~ x)
hat(newfit, intercept=TRUE)
hat(newfit)
plot(newfit)
plot(newfit)
hatvalues(newfit)
dfbeta(newfit)
dfbetas(newfit)
dfbetas(newfit[1:5, 2], 1)
dfbetas(newfit[1:5, 2], 3)
dfbetas(newfit[1:5, 1], 3)
dfbetas(newfit)[1:5, 2]
summary(lm(mpg ~ factor(cyl) + I(wt), data = mtcars))
summary(lm(mpg ~ factor(cyl), data = mtcars))
library("knitr", lib.loc="~/R/win-library/3.1")
```
library(datasets)
head(mtcars)
plot(mtcars)
plot3d(mtcars$am, mtcars$mpg)
library(datasets); library(rgl)
plot3d(mtcars$am, mtcars$mpg, type="n", frame=FALSE)
plot(mtcars$am, mtcars$mpg, type="n", frame=FALSE)
Performing Exploratory Data Analysis to detect any possible correlations between transmission type and MPG
plot(mtcars$am==0, mtcars$mpg, pch=19)
plot(mtcars$am, mtcars$mpg, pch=19, col=((mtcars$am==0)*1+1))
View(mtcars)
plot(mtcars$am, mtcars$mpg, pch=19, col=("red", "blue"))
plot(mtcars$am, mtcars$mpg, pch=19, col=c("red", "blue"))
with(subset(mtcars, am==1), points(mtcars$am, mtcars$mpg, col="blue")
with(subset(mtcars, am==1), points(mtcars$am, mtcars$mpg, col="blue"))
with(subset(mtcars, am==0), points(mtcars$am, mtcars$mpg, col="red"))
##with(subset(mtcars, am==1), points(mtcars$am, mtcars$mpg, col="blue"))###
```
with(mtcars, plot(am,mpg, type="p", main="Transimission and MPG in mtcars data"))
with(mtcars, plot(am,mpg, type="p", main="Transimission and MPG in mtcars data"), col="blue")
with(mtcars, plot(am,mpg, type="p", main="Transimission and MPG in mtcars data",  col="blue"))
plot(fit, type="p",pch=10)
plot(fit, type="p",pch=19)
plot(fit)
colors()
varwidth = TRUE, col = "lightblue")
col="lightblue")
col="lightblue")
col="lightblue")
boxplot(mpg ~ am, data = mtcars, xlab = "Transmission type", ylab = "MPG(Miles Per Gallo)", main = "Mtcars Data",col="lightblue")
col="lightblue")
boxplot(mpg ~ am, data = mtcars, xlab = "Transmission type", ylab = "MPG(Miles Per Gallo)", main = "Mtcars Data", varwidth=TRUE,col="lightblue")
boxplot(mpg ~ am, data = mtcars, xlab = "Transmission type", ylab = "MPG(Miles Per Gallo)", main = "Mtcars Data", varwidth=TRUE,col="lightblue")
boxplot(mpg ~ am, data = mtcars, xlab = "Transmission type", ylab = "MPG(Miles Per Gallo)", main = "Mtcars Data", varwidth=TRUE, col="lightblue")
data(InsectSprays)
summary(InsectSprays)
summary(lm(count ~ spray, data = InsectSprays))$coef
summary(lm(mpg ~ am, data = mtcars))$coef
summary(lm(mpg ~ am==0, data = mtcars))$coef
summary(lm(mpg ~ am==1, data = mtcars))$coef
summary(lm(mpg ~ am, data = mtcars))$coef
summary(lm(mpg ~ am-1, data = mtcars))$coef
summary(lm(mpg ~ am - 1, data = mtcars))$coef
summary(lm(mpg ~ am, data = mtcars))$coef
summary(lm(mpg ~ factor(am), data = mtcars))
summary(lm(mpg ~ factor(am) - 1, data = mtcars))
summary(lm(mpg ~ factor(am), data = mtcars))
summary(lm(mpg ~ , data = mtcars))
summary(lm(mpg ~ am - 1, data = mtcars))
summary(lm(mpg ~ am - 1, data = mtcars))$coef
summary(lm(mpg ~ factor(am), data=mtcars))
summary(lm(mpg ~ I(1*(am==0)) + I(1*(am==1)), data=mtcars))$coef
summary(lm(mpg ~ I(1*(am=='0')) + I(1*(am=='1')), data=mtcars))$coef
summary(lm(mpg ~ am - 1, data=mtcars))$coef
summary(lm(mpg ~ factor(am), data=mtcars))$coef
summary(lm(mpg ~ factor(am) - 1, data=mtcars))$coef
vif(fit)
library("MASS", lib.loc="C:/Program Files/R/R-3.1.1/library")
library(car)
install.packages("VIF")
library("VIF", lib.loc="~/R/win-library/3.1")
fit <- lm(mpg ~ . ,data=mtcars)
vif(fit)
install.packages("car")
library("car", lib.loc="~/R/win-library/3.1")
fit1 <- lm(mpg ~ factor(am), data=mtcars); summary(fit1)$coef; summary$p-value
fit1 <- lm(mpg ~ factor(am), data=mtcars); summary(fit1)$coef; summary$pvalue
fit1 <- lm(mpg ~ factor(am), data=mtcars); summary(fit1)$coef; summary$pval
fit1 <- lm(mpg ~ factor(am), data=mtcars); summary(fit1)$coef; summary$cor
fit1 <- lm(mpg ~ factor(am), data=mtcars); summary(fit1)$coef; summary$correlation
fit1 <- lm(mpg ~ factor(am), data=mtcars); summary(fit1)$coef; summary(fit1)$correlation
fit1 <- lm(mpg ~ factor(am), data=mtcars); summary(fit1)$coef; summary(fit1)$cor
fit1 <- lm(mpg ~ factor(am), data=mtcars); summary(fit1)$coef; summary(fit1)$p
fit1 <- lm(mpg ~ factor(am), data=mtcars); summary(fit1)$coef; summary(fit1)$pvalue
fit1 <- lm(mpg ~ factor(am), data=mtcars); summary(fit1)$coef; summary(fit1)$p-value
fit1 <- lm(mpg ~ factor(am), data=mtcars); summary(fit1)$coef; summary(fit1)
summary(fit1)$pvalue
summary(fit1)$pval
summary(fit1)$pval
summary(fit1)$p
summary(fit1)
summary(fit1)$fstatistic
summary(fit1)$correlation
summary(fit1)$coef
summary(lm(mpg ~ factor(cyl) + I(wt), data = mtcars))
summary(lm(mpg ~ factor(cyl) * I(wt), data = mtcars))
summary(lm(mpg ~ factor(cyl) + I(wt*0.5), data = mtcars))
summary(lm(mpg ~ factor(cyl) + I(wt*0.5), data = mtcars))$coef
fit1 <- lm(mpg ~ factor(cyl) + I(wt), data = mtcars)
fit2 <- lm(mpg ~ factor(cyl) * I(wt), data = mtcars)
anova(fit1,fit2)
library("MASS", lib.loc="C:/Program Files/R/R-3.1.1/library")
install.packages(c("httr", "jsonlite", "markdown", "mime", "RCurl", "SparseM", "swirl"))
?shuttle
summary(shuttle)
(shuttle)
head(shuttle)
head(shuttle)
glm(shuttle$use ~ shuttle$wind, family="binomial")
log1 <- glm(shuttle$use ~ shuttle$wind, family="binomial")
summary(log1)
exp(log1$coeff)
log2 <- glm(shuttle$use ~ shuttle$wind + shuttle$magn, family="binomial")
exp(log2$coeff)
log2 <- glm(shuttle$use ~ shuttle$wind + shuttle$magn, family="binomial")
log1 <- glm(shuttle$use - 1 ~ shuttle$wind, family="binomial")
log1 <- glm(shuttle$use ~ shuttle$wind - 1, family="binomial")
summary(log1)
log1 <- glm(1 - shuttle$use ~., family="binomial")
log1 <- glm(1 - shuttle$use, family="binomial")
log1 <- glm(shuttle$(1-use)~., family="binomial")
log1 <- glm(I(1 - shuttle$use) ~. , family="binomial")
log1 <- lm(I(log(shuttle$use -1)) ~., family="binomial")
log1 <- lm(I(log(shuttle$use -1)) ~.)
log1 <- lm(I(log(shuttle$use -1)) ~., data=shuttle)
log(shuttle$use - 1)
I(log(shuttle$use - 1))
I(log(shuttle$use - 1))
log1 <- glm(log(shuttle$use -1) ~., data=shuttle)
log1 <- glm(log(shuttle$use -1) ~., data=shuttle)
head(InsectSpray)
data(InsectSpray)
library(datasets)
data(InsectSprays)
head(InsectSprays)
logpois <- glm(InsectSprays$count ~ factor(InsectSprays$spray), family=poisson)
summary(logpois)
expo(logpois$coeff)
exp(logpois$coeff)
1/1.057
log(10)
logpois1 <- glm(InsectSprays$count ~ factor(InsectSprays$spray) + offset(1), family=poisson)
logpois1 <- glm(InsectSprays$count ~ factor(InsectSprays$spray), offset=10, family=poisson)
?offset
logpois1 <- glm(InsectSprays$count ~ factor(InsectSprays$spray), offset=t, family=poisson)
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
plot(x,y)
fit <- lm(y ~ x - 1)
plot(fit)
summary(fit)
knots <- seq(0,0)
knots
?seq
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
summary(yhat)
yhat <- lm(y ~ xMat - 1)
summary(yhat)
log1 <- glm(log(1 - as.numeric(shuttle$use) ~., data=shuttle)
log1 <- glm(1 - as.numeric(shuttle$use) ~., data=shuttle)
summary(log1)
log1 <- glm(1 - as.numeric(shuttle$use) ~., family-binomial)
log1 <- glm(1 - as.numeric(shuttle$use) ~., family=binomial)
log1 <- glm(1 - as.numeric(shuttle$use) ~., data=shuttle,family=binomial)
log1 <- glm(log(1 - as.numeric(shuttle$use)) ~., data=shuttle,family=binomial)
log1 <- glm(log(1 - as.numeric(shuttle$use)) ~.)
log1 <- glm(shuttle$use=="auto") ~., family=binomial)
log1 <- glm((shuttle$use=="auto") ~. , family=binomial)
log1 <- glm((shuttle$use=="auto") ~. , data=shuttle,family=binomial)
log1 <- glm(log(1 - as.numeric(shuttle$use)) ~ shuttle$wind, family=binomial)
log1 <- glm((1 - as.numeric(shuttle$use)) ~ shuttle$wind, family=binomial)
log1 <- glm(shuttle$use[shuttle$use=="auto"] ~ shuttle$wind, family=binomial)
head(shuttle)
log <- glm(shuttle$use ~ shuttle$wind, family=binomial)
summary(log)
log <- glm(shuttle$use[shuttle$use==auto] ~ shuttle$wind, family=binomial)
log <- glm(shuttle$use[shuttle$use=="auto"] ~ shuttle$wind, family=binomial)
log <- glm(shuttle$use[shuttle$use=="auto"] ~., family=binomial)
log <- glm(shuttle$use ~., family=binomial)
log <- glm(shuttle$use ~., data=shuttle, family=binomial)
log <- glm(1-shuttle$use ~ shuttle$wind, data=shuttle, family=binomial)
summary(shuttle$use)
log <- glm(shuttle$use ~ shuttle$wind, family=binomial, intercept=FALSE)
log <- glm(shuttle$use ~ shuttle$wind, family=binomial, intercept=TRUE)
log <- glm.fit(shuttle$use ~ shuttle$wind, family=binomial, intercept=TRUE)
log <- glm(shuttle$use ~ shuttle$wind[shuttle$use=="auto"], family=binomial)
log <- glm.fit(shuttle$use ~ shuttle$wind)
log <- glm(shuttle$use ~ shuttle$wind)
log <- glm(shuttle$use[shuttle$use=="auto"] ~ shuttle$wind)
log <- glm(shuttle$use[shuttle$use=="auto"] ~ shuttle$wind, family=binomial)
log <- glm(shuttle$use[shuttle$use=="auto"] ~ shuttle$wind[shuttle$use=="auto"], family=binomial)
log <- glm(shuttle$use[shuttle$use=="auto"] ~ shuttle$wind[shuttle$use=="auto"], family=binomial)
summary(log)
log <- glm(shuttle$use[shuttle$use=="noauto"] ~ shuttle$wind[shuttle$use=="noauto"], family=binomial)
log1 <- glm(shuttle$use[shuttle$use=="noauto"] ~ shuttle$wind[shuttle$use=="noauto"], family=binomial)
coeff(log1)
coef(log1)
summary(log1)
log1 <- lm(shuttle$use[shuttle$use=="noauto"] ~ shuttle$wind[shuttle$use=="noauto"], family=binomial)
log1 <- lm(shuttle$use[shuttle$use=="noauto"] ~ shuttle$wind[shuttle$use=="noauto"])
logAuto <- lm(shuttle$magn[shuttle$use=="noauto"] ~ shuttle$wind[shuttle$use=="noauto"])
summary(logAuto)
log3 <- glm(cbind(shuttle$use=="auto",shuttle$use=="noauto" ~ shuttle$wind), family="binomial")
log3 <- glm(cbind(shuttle$use=="auto",shuttle$use=="noauto") ~ shuttle$wind, family="binomial")
summary(log3)
summary(log3)$coef
yhat <- lm(y ~ xMat)
summary(yhat)
yhat <- lm(y ~ xMat - 1)
library("manipulate", lib.loc="~/R/win-library/3.1")
install.packages("shiny")
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/my_first_app')
shiny::runApp('R/win-library/3.1/shiny/examples/01_hello')
runExample("07_widgets")
runExample("09_upload")
shiny::runApp('R/win-library/3.1/shiny/examples/01_hello')
library(devtools)
install_github('slidify','ramnathv')
library(slidify)
shiny::runApp('R/win-library/3.1/knitr/shiny')
help(devtools)
library(devtools)
system.file(devtools)
detach("package:devtools", unload=TRUE)
library("devtools", lib.loc="~/R/win-library/3.1")
system.file(devtools)
library(shiny)
library(shinyapps)
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
library(reshape2)
View(Data)
View(nData)
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
View(India)
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
p1 <- xPlot(value ~ variable, color = 'SourceCountry', data=India, type="line-dotted")
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
View(India)
p1 <- xPlot(value ~ variable, color = 'SourceCountry', data=India, type="line-dotted")
p1
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
p1 <- xPlot(value ~ variable,data=India, type="line-dotted")
p1$addParams(height=400, dom = "myChart")
p1
p1 <- rPlot(value ~ variable,data=India, type="line")
p1
p1 <- rPlot(value ~ variable,data=India, type="BarChart")
p1
p1 <- Highcharts$new()
p1
p1$lib
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
View(nData)
head(nData)
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
View(Data)
names(Data)
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
time
timeperiod <- names(Data)[2:9,]
timeperiod <- names(Data)[2:9]
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
View(nData)
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
p1$color
p1$colour
p1
p1 <- xPlot(value ~ variable, data=nData, group="SourceCountry", type="line-dotted"
p1 <- xPlot(value ~ variable, data=nData, group="SourceCountry", type="line-dotted")
p1 <- xPlot(value ~ variable, data=nData, group="SourceCountry", type="line-dotted")
p$color
p$col
??xcharts
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runExample
shiny::runExample()
shiny::runExample("01_hello")
shiny::runExample("02_text")
title: "Readme"
shiny::runExample()
shiny::runExample("11_timer")
shiny::runExample("03_reactivity")
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
This application shows the data for new permanent residents (immigrants) to Canada based on their country of origin from Quarter 1 of 2012 to Quarter 4 of 2013. On the left side of the page, you can select which country you would like to see, and the chart on the right hand side on the right side will automatically refresh to show you the dotted line graph for data total number of people from that country to become permanent residents of Canada for the give time period.
install.packages("roxygen2")
library("roxygen2", lib.loc="~/R/win-library/3.1")
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
shiny::runApp('C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp')
author: "Charlie Zuo"
library(slidify)
setwd("C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp")
author("ShinyApp")
3. Data is downloaded from Government of Canada [Open Data website](http://data.gc.ca/data/en/dataset/6415c2d6-0e5a-4bf0-868c-b2037b2f1a4f)
job         :Data Science Specialization
slidify("index.rmd")
slidify("index.rmd")
install_github('slidifyLibraries', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(installr)
install_github('slidifyLibraries', 'ramnathv')
library('Rtools')
library(devtools)
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
slidify("index.rmd")
title       : My Data App
setwd("C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp")
require(reshape2)
uspexp <- melt(USPersonalExpenditure)
names(uspexp)[1:2] = c("category", "year")
x1 <- xPlot(value ~ year, group = "category", data = uspexp, type = "line-dotted")
require(rCharts)
x1 <- xPlot(value ~ year, group = "category", data = uspexp, type = "line-dotted")
x1
print(x1)
x1$print("chart4")
x1$print("chart1")
x1$print("chart1")
---
##Tools used for the application
**Tools used for the application**
publish(user = "charliezuo", repo = "DevDataProduct")
publish_github("DevDataProduct","charliezuo")
slidify("index.rmd")
slidify("index.Rmd")
setwd("C:/Users/Charlie/Desktop/Data Science/Develop Data Products/ShinyApp/ShinyApp")
slidify("index.Rmd")
publish("charliezuo","DevDataProduct")
publish("charliezuo","username.github.io")
publish("charliezuo","username.github.io")
